package pages.dashboard.products.all_products.wholesale_price;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.math.RandomUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import utilities.UICommonAction;

import java.time.Duration;
import java.util.ArrayList;
import java.util.List;

import static java.lang.Thread.sleep;
import static pages.dashboard.products.all_products.ProductPage.*;
import static utilities.character_limit.CharacterLimit.MAX_WHOLESALE_NUM_PER_VAR;
import static utilities.character_limit.CharacterLimit.MAX_WHOLESALE_PRICE_TITLE;
import static utilities.page_loaded_text.PageLoadedText.DB_CONFIGURE_WHOLESALE_PRICE_PAGE_LOADED_TEXT_ENG;
import static utilities.page_loaded_text.PageLoadedText.DB_CONFIGURE_WHOLESALE_PRICE_PAGE_LOADED_TEXT_VIE;

public class WholesalePricePage extends WholesalePriceElement {
    WebDriverWait wait;
    public static List<String>[] wholesaleMap;
    UICommonAction commonAction;

    public WholesalePricePage(WebDriver driver) {
        super(driver);
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        commonAction = new UICommonAction(driver);
    }

    Logger logger = LogManager.getLogger(WholesalePricePage.class);

    /**
     * Add new wholesale price
     */
    public void setupWholesalePrice(int lastID, String wholesaleTitle, int buyFrom, int pricePerItem, List<String> segmentList) throws InterruptedException {
        // wait element visible
        commonAction.waitElementList(WHOLESALE_TITLE);
        commonAction.waitElementList(WHOLESALE_BUY_FROM);
        commonAction.waitElementList(WHOLE_SALE_PRICE_PER_ITEM);
        commonAction.waitElementList(SEGMENT_DROPDOWN);
        logger.info("Wait element visible");

        // input wholesale title
        wait.until(ExpectedConditions.elementToBeClickable(WHOLESALE_TITLE.get(lastID))).sendKeys(Keys.CONTROL + "a" + Keys.DELETE);
        WHOLESALE_TITLE.get(lastID).sendKeys(wholesaleTitle);
        logger.info("Input wholesale title: %s".formatted(wholesaleTitle));

        // input buy from condition
        wait.until(ExpectedConditions.elementToBeClickable(WHOLESALE_BUY_FROM.get(lastID))).sendKeys(Keys.CONTROL + "a" + Keys.DELETE);
        WHOLESALE_BUY_FROM.get(lastID).sendKeys(String.valueOf(buyFrom));
        logger.info("Input buy from condition: %s".formatted(buyFrom));

        // input wholesale price
        wait.until(ExpectedConditions.elementToBeClickable(WHOLE_SALE_PRICE_PER_ITEM.get(lastID))).sendKeys(Keys.CONTROL + "a" + Keys.DELETE);
        WHOLE_SALE_PRICE_PER_ITEM.get(lastID).sendKeys(String.valueOf(pricePerItem));
        logger.info("Input wholesale price: %s".formatted(pricePerItem));

        // open segment list
        wait.until(ExpectedConditions.elementToBeClickable(SEGMENT_DROPDOWN.get(lastID))).click();
        logger.info("Open segment dropdown");

        // wait and select segment list
        sleep(1000);
        logger.info("Wait segment dropdown visible");

        // compare segment in UI and segment list
        for (int i = 0; i < LIST_SEGMENT_LABEL.size(); i++) {
            for (String segment : segmentList) {
                // if segment matches and segment is not selected => select segment
                if (LIST_SEGMENT_LABEL.get(i).getText().equals(segment) && (!LIST_SEGMENT_CHECKBOX.get(i).isSelected())) {
                    logger.info("Select segment: %s".formatted(LIST_SEGMENT_LABEL.get(i).getText()));
                    LIST_SEGMENT_LABEL.get(i).click();
                }
            }
        }

        // close segment list dropdown
        SEGMENT_DROPDOWN.get(lastID).click();
        logger.info("Close segment dropdown");
    }

    /**
     * Convert string to integer. If String can not convert, integer has generated by random function.
     */
    private Integer getInt(String string, int num) {
        try {
            // parse String to Integer
            return Integer.parseInt(string);
        } catch (NumberFormatException ex) {
            // if it can not parse, dummy data for next test
            // minimum of stock and price per item: 1
            return num > 0 ? (RandomUtils.nextInt(num) + 1) : 1;
        }
    }

    /**
     * Craw segment list from wholesaleMap
     */
    private List<String> getList(List<String> list, int startID) {
        List<String> segment = new ArrayList<>();
        // Craw data from wholesale configure
        // startID = 3: without variation product
        // startID = 4: variation product
        for (int i = startID; i < list.size(); i++) {
            segment.add(list.get(i));
        }
        return segment;
    }

    /**
     * <p> generate wholesale map</p>
     * <p> is variation: true when it is variation product</p>
     * <p> size: wholesale map size</p>
     */
    private List<String>[] generateWholesaleMap(boolean isVariationProduct, int size) {
        List<String>[] arrayList = new List[size];

        // if variation product, random variation value
        // else generate empty list
        // other data will be random generate on main function, so we only need to generate variation
        for (int i = 0; i < size; i++) {
            arrayList[i] = isVariationProduct ? List.of(variationValueList.get(RandomUtils.nextInt(variationValueList.size()))) : List.of();
        }

        return arrayList;
    }

    /**
     * <p> Configure wholesale price for without variation product</p>
     * <p> wholesaleMap: List of wholesale config</p>
     * <p> wholesale config: List.of(Wholesale title, Buy from, Price per item, Segment 1, Segment 2 ....)</p>
     */
    @SafeVarargs
    public final WholesalePricePage configureWholesalePriceForWithoutVariationProduct(List<String>... wholesaleConfigMap) throws InterruptedException {
        List<String>[] wholeMap = wholesaleConfigMap.length == 0 ? generateWholesaleMap(false, RandomUtils.nextInt(MAX_WHOLESALE_NUM_PER_VAR) + 1) : wholesaleConfigMap;

        // init wholesaleMap, wholesaleMap has been saved all wholesale configurations
        wholesaleMap = new List[wholeMap.length];

        // init index for wholesaleMap array
        int id = 0;

        // read and set up wholesale config
        for (List<String> wholesaleConfig : wholeMap) {

            // add wholesale price record
            wait.until(ExpectedConditions.elementToBeClickable(NO_VARIATION_ADD_WHOLESALE_PRICE_BTN)).click();

            // get wholesale price title. if no wholesale title has been provided, wholesale title has been dummy by random function
            String wholesaleTitle = wholesaleConfig.size() > 0 ? wholesaleConfig.get(0) : RandomStringUtils.randomAlphanumeric(MAX_WHOLESALE_PRICE_TITLE);

            // get buy from. if no buy from has been provided, buy from has been dummy by random function
            int buyFrom = wholesaleConfig.size() > 1 ? getInt(wholesaleConfig.get(1), withoutVariationStockQuantity) : RandomUtils.nextInt(withoutVariationStockQuantity) + 1;

            // get price per item. if no price has been provided, price per item has been dummy by random function
            int pricePerItem = wholesaleConfig.size() > 2 ? getInt(wholesaleConfig.get(2), withoutVariationSellingPrice) : RandomUtils.nextInt(withoutVariationSellingPrice) + 1;

            // get segment list. if no segment has provided, default segment - All customer has been selected
            List<String> segment = wholesaleConfig.size() > 3 ? getList(wholesaleConfig, 3) : List.of("All Customer");

            // specify wholesale record has just been added
            // new wholesale price record is always on bot of variation configuration
            int lastID = WHOLESALE_TITLE.size() - 1;

            // call configure wholesale price function
            setupWholesalePrice(lastID, wholesaleTitle, buyFrom, pricePerItem, segment);

            // get wholesale map for another test
            wholesaleMap[id] = new ArrayList<>(List.of(wholesaleTitle, String.valueOf(buyFrom), String.valueOf(pricePerItem)));
            wholesaleMap[id].addAll(segment);
            id++;
        }
        return this;
    }

    /**
     * index wholesale map by variation
     */
    @SafeVarargs
    private List<Integer> indexWholesaleMapByVariation(List<String>... wholesaleMap) {
        // init index list
        List<Integer> index = new ArrayList<>();

        // if wholesale map size = 0, skip
        if (wholesaleMap.length > 0) {
            // sort list wholesale configuration by variation
            for (int i = 0; i < wholesaleMap.length; i++) {
                if (!index.contains(i)) {
                    index.add(i);
                }
                for (int i1 = i + 1; i1 < wholesaleMap.length; i1++) {
                    if (!index.contains(i1)) {
                        // 0: variation name
                        if (wholesaleMap[i1].get(0).equals(wholesaleMap[i].get(0))) {
                            index.add(i1);
                        }
                    }
                }
            }
        }

        // index: wholesale configure after sort by variation name
        return index;
    }

    /**
     * <p> Configure wholesale price for variation product</p>
     * <p> wholesaleMap: List of wholesale config</p>
     * <p> wholesale config: List.of(Variation name, Wholesale title, Buy from, Price per item, Segment 1, Segment 2 ....)</p>
     */
    @SafeVarargs
    public final WholesalePricePage configureWholesalePriceForVariationProduct(List<String>... wholesaleConfigMap) throws InterruptedException {
        // get wholesale price configuration map
        List<String>[] wholeMap = wholesaleConfigMap.length == 0 ? generateWholesaleMap(true, RandomUtils.nextInt(MAX_WHOLESALE_NUM_PER_VAR) + 1) : wholesaleConfigMap;

        // wholesale temporary: save all wholesale config information (if variation incorrectly, null has been saved)
        List<String>[] wholesaleMapTemporary = new List[wholeMap.length];

        // get number of correctly wholesale configuration
        int wholesaleLastID = 0;

        // selectedVariation: list variation has wholesale price
        List<String> selectedVariation = new ArrayList<>();

        // sort wholesale map by variation
        List<Integer> index = indexWholesaleMapByVariation(wholeMap);

        // init wholesale record ID (it should be increased below, so it has been init -1)
        int lastID = -1;

        // configure wholesale price as index priority
        for (int id : index) {
            // get variation name
            String variation = wholeMap[id].size() > 0 ? wholeMap[id].get(0) : null;

            // skip if no variation has been provided or variation incorrectly
            if ((variation != null) && (variationValueList.contains(variation.replace("|", " ")))) {

                // if variation is not selected, select variation
                if (!selectedVariation.contains(variation)) {

                    wait.until(ExpectedConditions.elementToBeClickable(ADD_VARIATION_BTN)).click();
                    sleep(3000);

                    wait.until(ExpectedConditions.elementToBeClickable(LIST_VARIATION.get(variationValueList.indexOf(variation.replace("|", " "))))).click();

                    wait.until(ExpectedConditions.elementToBeClickable(OK_BTN)).click();
                    selectedVariation.add(variation);
                    lastID = -1;
                }

                // add new wholesale price record
                // when add variation, its add wholesale price button is always on top of page
                commonAction.waitElementList(HAS_VARIATION_LIST_ADD_WHOLESALE_PRICE_BTN);
                wait.until(ExpectedConditions.elementToBeClickable(HAS_VARIATION_LIST_ADD_WHOLESALE_PRICE_BTN.get(0))).click();

                // get wholesale price title. if no wholesale title has been provided, wholesale title has been dummy by random function
                String wholesaleTitle = wholeMap[id].size() > 1 ? wholeMap[id].get(1) : RandomStringUtils.randomAlphanumeric(MAX_WHOLESALE_PRICE_TITLE);

                // get buy from. if no buy from has been provided, buy from has been dummy by random function
                int buyFrom = wholeMap[id].size() > 2 ? getInt(wholeMap[id].get(2), variationStockQuantity.get(variationValueList.indexOf(variation))) : RandomUtils.nextInt(Math.max(variationStockQuantity.get(variationValueList.indexOf(variation)), 1)) + 1;

                // get price per item. if no price has been provided, price per item has been dummy by random function
                int pricePerItem = wholeMap[id].size() > 3 ? getInt(wholeMap[id].get(3), variationSellingPrice.get(variationValueList.indexOf(variation))) : RandomUtils.nextInt(Math.max(variationSellingPrice.get(variationValueList.indexOf(variation)), 1)) + 1;

                // get segment list. if no segment has provided, default segment - All customer has been selected
                List<String> segment = wholeMap[id].size() > 4 ? getList(wholeMap[id], 4) : List.of("All Customer");

                // specify wholesale record has just been added
                // new wholesale price record is always on bot of variation configuration
                lastID++;

                // call configure wholesale price function
                setupWholesalePrice(lastID, wholesaleTitle, buyFrom, pricePerItem, segment);

                // add correctly wholesale configuration to wholesale temporary
                wholesaleMapTemporary[wholesaleLastID] = new ArrayList<>(List.of(variation, wholesaleTitle, String.valueOf(buyFrom), String.valueOf(pricePerItem)));
                wholesaleMapTemporary[wholesaleLastID].addAll(segment);
                wholesaleLastID++;
            }
        }

        // init and copy all correctly wholesale configuration to wholesaleMap, it is used for another test
        wholesaleMap = new List[wholesaleLastID];

        // remove null list
        System.arraycopy(wholesaleMapTemporary, 0, wholesaleMap, 0, wholesaleLastID);

        return this;
    }

    public void completeConfigWholesalePrice() {
        wait.until(ExpectedConditions.elementToBeClickable(SAVE_BTN)).click();
        logger.info("Save and back to product detail page");
    }

    public WholesalePricePage verifyPageLoaded() {
        commonAction.verifyPageLoaded(DB_CONFIGURE_WHOLESALE_PRICE_PAGE_LOADED_TEXT_VIE, DB_CONFIGURE_WHOLESALE_PRICE_PAGE_LOADED_TEXT_ENG);
        return this;
    }
}
